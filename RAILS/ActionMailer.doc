Action Mailer

- Generate mailer
	bin/rails generate mailer UserMailer

- Mailers are conceptually similar to controllers, and so we get a mailer, a directory for views, and a test

	class UserMailer < ApplicationMailer
	  default from: 'notifications@example.com'
	 
	  def welcome_email(user)
	    @user = user
	    @url  = 'http://example.com/login'
	    mail(to: @user.email, subject: 'Welcome to My Awesome Site')
	  end
	end

	default Hash - This is a hash of default values for any email you send from this mailer. 								In this case we are setting the :from header to a value for all messages 									in this class. This can be overridden on a per-email basis.
	mail - The actual email message, we are passing the :to and :subject headers in.

- Just like controllers, any instance variables we define in the method become available for use in the views.

- Mailers are really just another way to render a view. Instead of rendering a view and sending out the HTTP protocol, they are just sending it out through the email protocols instead.
Action Mailer is nicely integrated with Active Job so you can send emails outside of the request-response cycle, so the user doesn't have to wait on it:
	class UsersController < ApplicationController
	  
	  def create
	    @user = User.new(params[:user])
	 
	    respond_to do |format|
	      if @user.save
	        # Tell the UserMailer to send a welcome email after save
	        UserMailer.welcome_email(@user).deliver_later
	 
	        format.html { redirect_to(@user, notice: 'User was successfully created.') }
	        format.json { render json: @user, status: :created, location: @user }
	      else
	        format.html { render action: 'new' }
	        format.json { render json: @user.errors, status: :unprocessable_entity }
	      end
	    end
	  end
	end

- Active Job's default behavior is to execute jobs via the :async adapter. So, you can use deliver_later now to send emails asynchronously.Active Job's default adapter runs jobs with an in-process thread pool. It's well-suited for the development/test environments, since it doesn't require any external infrastructure, but it's a poor fit for production since it drops pending jobs on restart. If you need a persistent backend, you will need to use an Active Job adapter that has a persistent backend (Sidekiq, Resque, etc).