React Router
	- at its heart, React Router is component
			render(
					<Router history={hashHistory}>
						<Route path="/" component={App}></Route>
						<Route path="/about" component={About}></Route>
					</Router>, document.getElementById('app'));

	- hashHistory - it manages the routing history with the hash portion of the url. It's got that extra junk to shim some behavior 
									the browser has natively when using real urls

	Link 
		- It's almost identical to the `<a/>` tag you're used to except that it's aware of the `Router` it was rendered in.
			Example:
				<ul>
    			<li><Link to="/about">About</Link></li>
    			<li><Link to="/repos">Repos</Link></li>
    		</ul>

	ActiveLink
		- One way that `Link` is different from `a` is that it knows if the path it links to is active so you can style it differently.
			Two ways:
				1) Active Styles
						<li><Link to="/about" activeStyle={{ color: 'red' }}>About</Link></li>
				2) Active Class name
						<li><Link to="/about" activeClassName="active">About</Link></li>

	Nested Routes
		- app is just a series of boxes inside boxes inside boxes? Have you also noticed your URLs tend to be coupled to that nesting? 
			For example given this url, `/repos/123`, our components would probably look like this:
						<App>       {/*  /          */}
							<Repos>   {/*  /repos     */}
								<Repo/> {/*  /repos/123 */}
							</Repos>
						</App>
		- React Router embraces this by letting you nest your routes, which automatically becomes nested UI.
			Example:
						render((
							<Router history={hashHistory}>
								<Route path="/" component={App}>
									{/* make them children of `App` */}
									<Route path="/repos" component={Repos}/>
									<Route path="/about" component={About}/>
								</Route>
							</Router>
						), document.getElementById('app'))

						// render children inside App
						render() {
							return (
								<div>
									<h1>React Router Tutorial</h1>
									<ul role="nav">
										<li><Link to="/about">About</Link></li>
										<li><Link to="/repos">Repos</Link></li>
									</ul>

									{/* add this */}
									{this.props.children}

								</div>
							)
						}

						//`App` component continues to render while the child route's component gets swapped around as `this.props.children` :)

						// React Router is constructing your UI like this:
								// at /about
								<App>
									<About/>
								</App>

								// at /repos
								<App>
									<Repos/>
								</App>

	URL parameters
		- the parts that starts with ":" are URL parameters whoes values will be parsed out and made available to route components on 
					"this.props.params.name"
		- parameter name in the route `path` becomes the property name in the component

			Example:
					//index.js - this is some kind of 'route declaration', route will not show on page
					<Route path="/repos/:userName/:repoName" component={Repo}/>

					//Repos - route 'implementation' for given 'declaration'
					<li><Link to="/repos/reactjs/react-router">React Router</Link></li>
        	<li><Link to="/repos/facebook/react">React</Link></li>

					//Repo
					<div>
						<h3>{this.props.params.repoName}</h3>
						<h3>{this.props.params.userName}</h3>
					</div>

		 - more nesting - if we want the list to persist, just like the global navigation persists?
					//First, nest the `Repo` route under the `Repos` route. Then go render `this.props.children` in `Repos`.
					// index.js
					<Route path="/repos" component={Repos}>
						<Route path="/repos/:userName/:repoName" component={Repo}/>
					</Route>

					// Repos.js
					<div>
						<h2>Repos</h2>
						<ul>
							<li><Link to="/repos/reactjs/react-router">React Router</Link></li>
							<li><Link to="/repos/facebook/react">React</Link></li>
						</ul>
						
						{/* will render `Repo.js` when at /repos/:userName/:repoName */}
						{this.props.children}
					</div>

	Index Routes
		- IndexRoute has no path. It becomes `this.props.children` of the parent when no other child of the parent matches, or in other words, 
			when the parent's route matches exactly.
		Example:
			import { Router, Route, hashHistory, IndexRoute } from 'react-router'

			<Router history={hashHistory}>
	    	<Route path="/" component={App}>
					<IndexRoute component={Home}/>
					...

	IndexLinks
		Two ways:
			1) Example:
					import { IndexLink } from 'react-router'

					<li><IndexLink to="/" activeClassName="active">Home</IndexLink></li>

			2) Example:
					<li><Link to="/" activeClassName="active" onlyActiveOnIndex={true}>Home</Link></li>
		

	Clean URLs with Browser History
		- Modern browsers let JavaScript manipulate the URL without making an http request, so we don't need to rely on the hash (`#`) portion of the url
			to do routing, but there's a catch
		- import `browserHistory` instead of `hashHistory`.
				import { Router, Route, browserHistory, IndexRoute } from 'react-router'

				render((
					<Router history={browserHistory}>
						{/* ... */}
					</Router>
				), document.getElementById('app'))

		- the catch. Click on a link and then refresh your browser. What happens?
					Cannot GET /repos

		- Your server needs to deliver your app no matter what URL comes in, because your app, in the browser, is manipulating the URL. Our current
			server doesn't know how to handle the URL.
			The Webpack Dev Server has an option to enable this. Open up `package.json` and add `--history-api-fallback`.
				    "start": "webpack-dev-server --inline --content-base . --history-api-fallback"

		- We also need to change our relative paths to absolute paths in `index.html` since the URLs will be at deep paths and the app, if it
			starts at a deep path, won't be able to find the files.

				<!-- index.html -->
				<!-- index.css -> /index.css -->
				<link rel="stylesheet" href="/index.css">

				<!-- bundle.js -> /bundle.js -->
				<script src="/bundle.js"></script>

	Navigating Programatically
		- While most navigation happens with `Link`, you can programmatically navigate around an application in response to form submissions, button
			clicks, etc.
		- There are two ways you can do this, the first is simpler than the second.
				1) Way - browserHistory.push(path) 

						// modules/Repos.js
						import { browserHistory } from 'react-router'

  					handleSubmit(event) {
					    const path = `/repos/${userName}/${repo}`
					    browserHistory.push(path)
					  },

				2) Way - better.You can also use the `router` that `Router` provides on "context". First, we ask for context in the component, and then you
 									can use it.This way you'll be sure to be pushing to whatever history gets passed to `Router`. It also makes testing a bit easier 			
									since you can more easily stub context than singletons.
						
							export default React.createClass({
								// ask for `router` from context
								contextTypes: {
								  router: React.PropTypes.object
								},

								handleSubmit(event) {
		  						// ...
								  this.context.router.push(path)
								},
								// ..
							})

REACT ROUTER
	
Route configuration:
	Params and Query Strings
		//route
		<Route path="/course/:courseId" compoent={Course} />

		// url
		'/course/clean-code?module=3'

		// The components props will be populated
		var Course = React.createClass({
			render: function(){
				this.props.params.courseId; // "clean-code"
				this.props.query.module; // "3"
				this.props.path; // "/course/clean-code?module=3"
			}
		});

	Links
		URL: /user/1

		Route: <Route path="user" path="/user/:userId" />

		JSX: <Link to="/user" params={{userId: 1}}>Bobby Tables</Link>
		- after JSX Link is compiled this is generated:
			<a href="/user/1">Bobby Tables</a>

Navigating Programatically
	- While most navigation happens with Link, you can programmatically navigate around an application in response to form submissions, button clicks, etc.

	Example:
		export default React.createClass({
		  // ask for `router` from context
		  contextTypes: {
		    router: React.PropTypes.object
		  },

		  // ...

		  handleSubmit(event) {
		    // ...
		    this.context.router.push(path)
		  },

		  // ..
		})
