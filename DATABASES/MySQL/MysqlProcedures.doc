==============PROCEDURE====================================
Syntax:
	USE `classicmodels`;
	DROP procedure IF EXISTS `GetAllProducts`; 
	
	DELIMITER $$
	USE `classicmodels`$$
	CREATE PROCEDURE `GetAllProducts` () // moze i GetAllProducts() bez navodnika
		BEGIN
			select * from products;
		END$$

	DELIMITER ;

	//calling procedure
	call GetAllProducts()

Variables
	Declaring variables
		- we must declare variable before we can use it. To declare variable inside a stored procedure we use DECLARE statement:
				DECLARE variable_name datatype(size) DEFAULT default_value;
			
				- a variable can have any MySQL	data types, such as INT, VARCHAR, DATETIME, etc.
				- when we declare variable its initial value is NULL. We can assign the variable a initial value using the DEFAULT keyword.

		- Examples:
				DECLARE total_sale INT DEFAULT 0;
				DECLARE x,y INT DEFAULT 0; //we can declare two or more variables that share the same data type using a single statement

	Assigning variables
		- to assign a variableanother value we use SET statement
			Example:
				DECLARE total_count INT DEFAULT 0;
				SET total_count = 10;
		- besides the SET statement , we can use the SELECT INTO statement to assign the result of a query, which returns a scalar value, to a variable.
			Example:
				DECLARE total_products INT DEFAULT 0;
				SELECT count(*) INTO total_products
				FROM products;

	Variables Scope
		- if we declare a variable inside a stored procedure, it will be out of scope when the END statement of stored procedure reached.
		- a variable that begins with the @ sign is session variable. It is available and accessible until the session ends.

	Parameters
		- a parameters has one of three modes: IN, OUT or INOUT
		- IN – is the default mode. When you define an IN parameter in a stored procedure, the calling program has to pass an argument to the stored
 						procedure. In addition, the value of an IN parameter is protected. It means that even the value of the IN parameter is changed inside the
						stored procedure, its original value is retained after the stored procedure ends. In other words, the stored procedure only works on the
 						copy of the IN parameter.
		- OUT – the value of an OUT parameter can be changed inside the stored procedure and its new value is passed back to the calling program. 
						Notice that the stored procedure cannot access the initial value of the OUT parameter when it starts.
		- INOUT – an INOUT  parameter is the combination of IN  and OUT  parameters. It means that the calling program may pass the argument, 
							and the stored procedure can modify the INOUT parameter and pass the new value back to the calling program.
		- the syntax of defining parameter in the stored procedure:
					MODE param_name param_type(param_size)
			
					- MODE - IN, OUT, INOUT
		- Each parameter is separated by a comma (,) if the stored procedure has more than one parameter
		
		Examples:
				// IN example
				DROP procedure IF EXISTS `GetOfficeByCountry`;
				DELIMITER $$
				USE `classicmodels`$$
				CREATE PROCEDURE `GetOfficeByCountry` (in countryName VARCHAR(255))
				BEGIN
					select * from offices where country = countryName;
				END$$
				DELIMITER ;				

				//calling
				CALL GetOfficeByCountry('USA');


				// OUT example
				DROP procedure IF EXISTS `CountOrderByStatus`;
				DELIMITER $$
				USE `classicmodels`$$
				CREATE PROCEDURE `CountOrderByStatus` (in orderStatus varchar(25), out total int)
				BEGIN
					select count(orderNumber)
						into total
						from orders
						where status = orderStatus;
				END$$
				DELIMITER ;

				//calling
				CALL CountOrderByStatus('Shipped',@total);
				SELECT @total;
				CALL CountOrderByStatus('in process',@total);
				SELECT @total AS  total_in_process;

				//INOUT example
				DROP procedure IF EXISTS `set_counter`;
				DELIMITER $$
				USE `classicmodels`$$
				CREATE PROCEDURE `set_counter` (inout count int(4), in inc int(4))
				BEGIN
					set count = count + inc;
				END$$
				DELIMITER ;

				//calling
				SET @counter = 1;
				CALL set_counter(@counter,1); -- 2
				CALL set_counter(@counter,1); -- 3
				CALL set_counter(@counter,5); -- 8
				SELECT @counter; -- 8

	Stored procedure that returns multiple values
		Example:
			//procedure accepts customer number and returns the total number of orders that was shipped, canceled, resolved, and disputed.
			CREATE DEFINER=`root`@`localhost` PROCEDURE `get_order_by_cust`(
					IN cust_no INT,
					OUT shipped INT,
					OUT canceled INT,
					OUT resolved INT,
					OUT disputed INT
			)
			BEGIN
				-- shipped
				select count(*)
				into shipped
				from orders
				where customerNumber = cust_no and status = 'Shipped';
				
				-- canceled
				select count(*)
				into shipped
				from orders
				where customerNumber = cust_no and status = 'Canceled';
				
				-- resolved
				select count(*)
				into shipped
				from orders
				where customerNumber = cust_no and status = 'Resolved';
				
				-- disputed
				select count(*)
				into shipped
				from orders
				where customerNumber = cust_no and status = 'Disputed';    
			END

			//calling procedure
			CALL get_order_by_cust(141,@shipped,@canceled,@resolved,@disputed);
			SELECT @shipped,@canceled,@resolved,@disputed;


