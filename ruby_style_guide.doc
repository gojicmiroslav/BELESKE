Ruby Style Guide:

* Prefer a single-line format for class definitions with no body
    # bad
    class FooError < StandardError
    end

    # okish
    class FooError < StandardError; end

    # good
    FooError = Class.new(StandardError)

* No spaces after (, [ or before ], ). Use spaces around { and before }
    # bad
    some( arg ).other
    [ 1, 2, 3 ].each{|e| puts e}

    # good
    some(arg).other
    [1, 2, 3].each { |e| puts e }

    { and } deserve a bit of clarification, since they are used for block and hash literals, as well as string interpolation.

    For Hash - both are good:
      # good - space after { and before }
      { one: 1, two: 2 }

      # good - no space after { and before }
      {one: 1, two: 2}

    Interpolated expressions:
      # bad
      "From: #{ user.first_name }, #{ user.last_name }"

      # good
      "From: #{user.first_name}, #{user.last_name}"

* Indent when as deep as case
    # bad
    case
      when song.name == 'Misty'
        puts 'Not again!'
      when song.duration > 120
        puts 'Too long!'
      when Time.now.hour > 21
        puts "It's too late"
      else
        song.play
    end

    # good
    case
    when song.name == 'Misty'
      puts 'Not again!'
    when song.duration > 120
      puts 'Too long!'
    when Time.now.hour > 21
      puts "It's too late"
    else
      song.play
    end

* Use empty lines between method definitions and also to break up methods into logical paragraphs internally
    def some_method
      data = initialize(options)

      data.manipulate!

      data.result
    end

* Avoid line continuation \ where not required. In practice, avoid using line continuations for anything but string concatenation.
    long_string = 'First part of the long string' \
                  ' and second part of the long string'

* Align the parameters of a method call if they span more than one line. When aligning parameters is not appropriate due to line-length constraints, single indent for the lines after the first is also acceptable

  # starting point (line is too long)
  def send_mail(source)
    Mailer.deliver(to: 'bob@example.com', from: 'us@example.com', subject: 'Important message', body: source.text)
  end

  # bad (double indent)
  def send_mail(source)
    Mailer.deliver(
        to: 'bob@example.com',
        from: 'us@example.com',
        subject: 'Important message',
        body: source.text)
  end

  # good
  def send_mail(source)
    Mailer.deliver(to: 'bob@example.com',
                   from: 'us@example.com',
                   subject: 'Important message',
                   body: source.text)
  end

  # good (normal indent)
  def send_mail(source)
    Mailer.deliver(
      to: 'bob@example.com',
      from: 'us@example.com',
      subject: 'Important message',
      body: source.text
    )
  end

* Align the elements of array literals spanning multiple lines
    # good
    menu_item = [
      'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam',
      'Baked beans', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam'
    ]

* Add underscores to large numeric literals to improve their readability.
    # bad - how many 0s are there?
    num = 1000000

    # good - much easier to parse for the human brain
    num = 1_000_000

* Use def with parentheses when there are parameters. Omit the parentheses when the method doesn't accept any parameters.
    # bad
    def some_method()
      # body omitted
    end

    # good
    def some_method
      # body omitted
    end

    # bad
    def some_method_with_parameters param1, param2
      # body omitted
    end

    # good
    def some_method_with_parameters(param1, param2)
      # body omitted
    end

* Define optional arguments at the end of the list of arguments. Ruby has some unexpected results when calling methods that have optional arguments at the front of the list.
    # bad
    def some_method(a = 1, b = 2, c, d)
      puts "#{a}, #{b}, #{c}, #{d}"
    end

    some_method('w', 'x') # => '1, 2, w, x'
    some_method('w', 'x', 'y') # => 'w, 2, x, y'
    some_method('w', 'x', 'y', 'z') # => 'w, x, y, z'

    # good
    def some_method(c, d, a = 1, b = 2)
      puts "#{a}, #{b}, #{c}, #{d}"
    end

    some_method('w', 'x') # => '1, 2, w, x'
    some_method('w', 'x', 'y') # => 'y, 2, w, x'
    some_method('w', 'x', 'y', 'z') # => 'y, z, w, x'

* Avoid the use of parallel assignment for defining variables. Parallel assignment is allowed when it is the return of a method call, used with the splat operator, or when used to swap variable assignment. 
    # good - method return
    def multi_return
      [1, 2]
    end

    first, second = multi_return

    # good - use with splat
    first, *list = [1, 2, 3, 4] # first => 1, list => [2, 3, 4]

    hello_array = *'Hello' # => ["Hello"]

    a = *(1..3) # => [1, 2, 3]

* Use one expression per branch in a ternary operator. This also means that ternary operators must not be nested. Prefer if/else constructs in these cases.
    # bad
    some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else

    # good
    if some_condition
      nested_condition ? nested_something : nested_something_else
    else
      something_else
    end

* Leverage the fact that if and case are expressions which return a result.
    # bad
    if condition
      result = x
    else
      result = y
    end

    # good
    result =
      if condition
        x
      else
        y
      end

* Avoid the use of !!
    !! converts a value to boolean, but you don't need this explicit conversion in the condition of a control expression; using it only obscures your intention. If you want to do a nil check, use nil? instead.

* The and and or keywords are banned. For boolean expressions, always use && and || instead. For flow control, use if and unless; && and || are also acceptable but less clear.
    # bad
    # boolean expression
    ok = got_needed_arguments and arguments_are_valid

    # control flow
    document.save or fail(RuntimeError, "Failed to save document!")

    # good
    # boolean expression
    ok = got_needed_arguments && arguments_are_valid

    # control flow
    fail(RuntimeError, "Failed to save document!") unless document.save

    # ok
    # control flow
    document.save || fail(RuntimeError, "Failed to save document!")

* Favor modifier if/unless usage when you have a single-line body. Another good alternative is the usage of control flow &&/||
    # bad
    if some_condition
      do_something
    end

    # good
    do_something if some_condition

    # another good option
    some_condition && do_something

* Avoid modifier if/unless usage at the end of a non-trivial multi-line block.
    # bad
    10.times do
      # multi-line body omitted
    end if some_condition

    # good
    if some_condition
      10.times do
        # multi-line body omitted
      end
    end

* Favor unless over if for negative conditions (or control flow ||)
    # bad
    do_something if !some_condition

    # bad
    do_something if not some_condition

    # good
    do_something unless some_condition

    # another good option
    some_condition || do_something

* Don't use parentheses around the condition of a control expression
    # bad
    if (x > 10)
      # body omitted
    end

    # good
    if x > 10
      # body omitted
    end

* Do not use while/until condition do for multi-line while/until
    # bad
    while x > 5 do
      # body omitted
    end

    until x > 5 do
      # body omitted
    end

    # good
    while x > 5
      # body omitted
    end

    until x > 5
      # body omitted
    end

* Favor modifier while/until usage when you have a single-line body.
    # bad
    while some_condition
      do_something
    end

    # good
    do_something while some_condition

* Favor until over while for negative conditions
    # bad
    do_something while !some_condition

    # good
    do_something until some_condition

* Omit the outer braces around an implicit options hash.
    # bad
    user.set({ name: 'John', age: 45, permissions: { read: true } })

    # good
    user.set(name: 'John', age: 45, permissions: { read: true })

* Use the proc invocation shorthand when the invoked method is the only operation of a block.