Creating new project:
	composer create-project --prefer-dist laravel/laravel cms
	
Creating new project with Laravel installer:
	laravel new blog

Runing server(localhost:8000):
	php artisan serve

Resource:
	- https://laravel.com/api/5.4/index.html

Console command:
	php artisan help
	php artisan help <command>
		Example:
			php artisan help make:controller
	php artisan list //list all commands
	php artisan help make:controller // help for generate controller
	php artisan route:list

Model
	- php artisan make:model <name> - creates a new Eloquent model class
	- php artisan make:model -m <name> - creates a model and migration
	
	Example:
		php artisan make:model Card

TEST-DRIVEN
		- debug function dd($arg);
		
DEBUG
	- dd function dumps the given variables and ends execution of the script:
			dd($value);
			dd($value1, $value2, $value3, ...);
	- If you do not want to halt the execution of your script, use the dump function instead:
			dump($value);
			
AUTH
	- scaffold basic login and registration views and routes
			php artisan make:auth
			php artisan migrate
	- config mail for sending email in for pasword forgotten
			# .env
			MAIL_DRIVER=log  // email will be stored in storage/logs/laravel.log
			
			
			
			# config/mail.php
			'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'miroslav.gojic78@gmail.com'),
        'name' => env('MAIL_FROM_NAME', 'Miroslav'),
			],
			
	- authentication routes - vendpr/laravel/framewordk/src/illuminate/Routing/Router.php:
			// Authentication Routes...
			$this->get('login', 'Auth\LoginController@showLoginForm')->name('login');
			$this->post('login', 'Auth\LoginController@login');
			$this->post('logout', 'Auth\LoginController@logout')->name('logout');

			// Registration Routes...
			$this->get('register', 'Auth\RegisterController@showRegistrationForm')->name('register');
			$this->post('register', 'Auth\RegisterController@register');

			// Password Reset Routes...
			$this->get('password/reset', 'Auth\ForgotPasswordController@showLinkRequestForm')->name('password.request');
			$this->post('password/email', 'Auth\ForgotPasswordController@sendResetLinkEmail')->name('password.email');
			$this->get('password/reset/{token}', 'Auth\ResetPasswordController@showResetForm')->name('password.reset');
			$this->post('password/reset', 'Auth\ResetPasswordController@reset');
			
MAINTENANCE MODE
	- php artisan down
		(an then: php artisan serve)
	- user will only see warning page 
	- php artisan up
	
Flas Messages
	- using Facades
		//in controller
			Session::flash('status', 'Hello there')
			
		//view
			@if (Session::has('status'))
				<h3>{{ Session::get('status') }}</h3>
			@endif
			
	- custom helper method for flash
			// create app/helpers.php
			function flash($message, $type = 'notice')
			{
				session()->flash('flash_message', $message);
				session()->flash('flash_type', $type);
			}
			
			//add helper file - composer.json
			"autoload": {
					"classmap": [
							"database"
					],
					"psr-4": {
							"App\\": "app/"
					},
					"files": [
							"app/helpers.php"
					]
			},
			
			// in console - to make shure changes are updated
			composer dump-autoload
			
			// in route
			flash('You are signed in', 'sucess');
			
Session
	- using global methods to put something in the session
			session(['status' => 'Welcome'])
			//or
			Session::put('status', 'Welcome')
			
	- we can get with
			session('status') // returns null if status
			//or
			Session::get('status')
			
	- get session
			session('flash_message') // return null if no flash message
			// we can call methods on the session
			session()->has('flash_message') // returns flase if no flash message
			session()->flash('status', 'Welcome')
			
Dependency injection
	class RegisterUser 
	{
			protected $mailer;
			
			//constructor injection
			public function __construct(Mailer $mailer)
			{
				$this->mailer = $mailer;
			}
			
			//method injection
			public function setMailer(Mailer $mailer)
			{
				$this->mailer = $mailer;
			}
	}
			
Service container (laravel_project2)
	- add to twe container
		// we can think of it as: ['foo' => 'bar'] - bar can be anything
		App::bind('foo', function(){
			return 'bar';
		});

	- resolve from container
			1) way
					App::make('foo'); // 'bar'
			2) way
					app('foo')
			3) way
					$this->app->make('foo);
			4) way
					$this->app['foo'];
					
	- it retuns a different object
			$one = app('foo')
			$two = app(foo)
			// $one !== $two  - there are different objects
			
	- if we want same objects
			App::singleton('foo', function(){
				return 'bar';
			});
			
			// $one === $two  - there are same objects
			
	- automatic resolution - get this "bind" to routes or controllers
			class RegisteUser
			{
				...
			}	
	
		
			App::bind('RegisterUser', function(){
				return new RegisterUser(new Mailer);
			});
	
			// this will work even if we do not do App::bind()
			// Laravel will found this class and resolve it
			Route::get('/', function(RegisterUser $registerUser){
				...
			});
			
Service Provider (laravel_project2)
	- service provider is point of entry for resource (package, component, specific portion of project,...)
	- function register of every service provider of Laravel source
			public function register()
			{
				$this->app->singleton('hash', function(){
					return new BcryptHasher;
				});
			}
			
			// now we can do
			$this->app->make('hash'); // BcryptHasher
			// or...
			app('hash'); // BcryptHasher
			
	- create provider
			php artisan make:provider FooServiceProvider
			
			// convention for name: ExampleServiceProvider
			
	- service provider methods:
			register() - registering at Laravel Service Container. As part of page load Laravel will cycle through any Service Provider
										we created and DECLARED, and call the register() method. That way it will register itself with framework.
			boot() - called after every Service Provider is called
								Example:
									function boot(){
										Event::listen('event');
									}
									
	- declare service provider:
			# in config/app.php, to Application Service Providers group add:
			App\Providers\FooProvider::class
			
		
			

				
	

