ANGULAR

Angular Directives
    At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class)  		that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element (e.g. via event
    listeners), or even to transform the DOM element and its children.
    What does it mean to "compile" an HTML template? For AngularJS, "compilation" means attaching directives to the HTML 		to make it interactive.

	Directives:
		1) ng-bind:  
			The ngBind attribute tells Angular to replace the text content of the specified HTML element with the value of a 				given expression, and to update the text content when the value of that expression changes.
			Typically, you don't use ngBind directly, but instead you use the double curly markup like {{ expression }} which 			is similar but less verbose.
			It is preferable to use ngBind instead of {{ expression }} if a template is momentarily displayed by the browser 				in its raw state before Angular compiles it. Since ngBind is an element attribute, it makes the bindings      			invisible to the user while the page is loading.

			Example:
				<script>
					angular.module('bindExample', [])
						.controller('ExampleController', ['$scope', function($scope) {
							$scope.name = 'Whirled';
						}]);
				</script>
				<div ng-controller="ExampleController">
					<label>Enter name: <input type="text" ng-model="name"></label><br>
					Hello <span ng-bind="name"></span>!
				</div>
		2) ngRoute module:
				ngView - ngView is a directive that complements the $route service by including the rendered template of the 									 current route into the main layout (index.html) file. Every time the current route changes, 
								 the included view changes with it according to the configuration of the $route service.
 								 Usage:
										- <ng-view>...</ng-view>
										- <ANY ng-view></ANY>
		3) ng-if - The ngIf directive removes or recreates a portion of the DOM tree based on an {expression}. If the 							 expression assigned to ngIf evaluates to a false value then the element is removed from the DOM, 							 otherwise a clone of the element is reinserted into the DOM. 
							 It is JavaScript expression that returns TRUE or FALSE.

							 Syntax:
									<ANY ng-if="expression">...</ANY>
							 Example:
									<label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
									Show when checked:
									<span ng-if="checked" class="animate-if">
									  This is removed when the checkbox is unchecked.
									</span>
		4) ng-model - connects html element to variable in $scope. This is two-way data binding directives.
		5) ng-show - The ngShow directive shows or hides the given HTML element based on the expression provided to the 								ngShow attribute. The element is shown or hidden by removing or adding the .ng-hide CSS class onto the 									element. The .ng-hide CSS class is predefined in AngularJS and sets the display style to none (using 									an !important flag). When the ngShow expression evaluates to a falsy value then the .ng-hide CSS class 									is added to the class attribute on the element causing it to become hidden. When truthy, the .ng-hide 								CSS class is removed from the element causing the element not to appear hidden.

		*ng-show vs ng-if - when its TRUE ng-show add class .ng-hide to the element(ng-hide has CSS rule: 
												display: none !important), whereas ng-if completely removes element from DOM.
		6) ng-hide - inverse, hide if expression is TRUE
		7) ng-class - he ngClass directive allows you to dynamically set CSS classes on an HTML element by databinding an 									expression that represents all classes to be added.
									Accepts - JavaScript object, where is:
										key - class
										value - condition to apply class(true or false)

									Example:
										<div class="alert" ng-class="{ "alert-info" : handle.length < characters, 'alert-danger':
											 handle.length > characters }" >
											Must be less then {{ characters }} characters!!!
										</div>

										angular.module('filterExample', []).controller('MainCtrl', function($scope, $filter) {
										  $scope.handle = '';
										  $scope.characters = 5;
										});

		Create Custom Directive:
			

Services
	Angular services are substitutable objects that are wired together using dependency injection (DI). You can use  
 	services to organize and share code across your app.
	Angular services are:
		Lazily instantiated – Angular only instantiates a service when an application component depends on it.
		Singletons – Each component dependent on a service gets a reference to the single instance generated by the service 								factory.
	$scope service is exception, which isn't singleton. It is child of $rootScope, which are attached to the main app.

	Like other core Angular identifiers, built-in services always start with $ (e.g. $http).

	Services:
			
	1) $routeParams - allows you to retrieve the current set of route parameters.Requires the ngRoute module to be  										installed. Note that the $routeParams are only updated after a route change completes successfully. 										This means that you cannot rely on $routeParams being correct in route resolve functions. Instead 										you can use $route.current.params to access the new route's parameters.
										The route parameters are a combination of $location's search() and path(). The path parameters are 											extracted when the $route path is matched.	

	2) $location - parses the URL in the browser address bar (based on the window.location) and makes the URL available to 									 your application. Changes to the URL in the address bar are reflected into $location service and 								 changes to $location are reflected into the browser address bar.
								The $location service:
									- Exposes the current URL in the browser address bar, so you can
												- Watch and observe the URL.
												- Change the URL.
									- Synchronizes the URL with the browser when the user
												- Changes the address bar.
												- Clicks the back or forward button (or clicks a History link).
												- Clicks on a link.
									- Represents the URL object as a set of methods (protocol, host, port, path, search, hash).	

									Methods:	
										- absUrl() - getter only, return full url representation with all segments encoded. 
																 Example:	
																	var absUrl = $location.absUrl();
										- url() - getter/setter, return url (e.g. /path?a=b#hash) when called without any parameter,
															change path, search and hash, when called with parameter and return $location.
										- protocol() - getter, returns protocol, example: "https"
										- host() - getter, return host of current url.Note: compared to the non-angular version 															 location.host which returns hostname:port, this returns the hostname portion only.
 															 Examples:	
																	// given url http://example.com/#/some/path?foo=bar&baz=xoxo
																	var host = $location.host();
																	// => "example.com"

																	// given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
																	host = $location.host();
																	// => "example.com"
																	host = location.host;
																	// => "example.com:8080"
										- port() - getter, return port.
										- path([path]) - getter/setter, Return path of current url when called without any parameter.
																		 Change path when called with parameter and return $location.
																		 Note: Path should always begin with forward slash (/), this method will add the 	  																		 forward slash if it is missing.		
																		 Example:
																				// given url http://example.com/#/some/path?foo=bar&baz=xoxo
																				var path = $location.path();
																				// => "/some/path"
										- search(search, [paramsValue]) - getter/setter. Return search part (as object) of current url when 																			called without any parameter.Change search part when called with parameter and 																				return $location.
																			Examples:
																					// given url http://example.com/#/some/path?foo=bar&baz=xoxo
																					var searchObject = $location.search();
																					// => {foo: 'bar', baz: 'xoxo'}

																					// set foo to 'yipee'
																					$location.search('foo', 'yipee');
																					// $location.search() => {foo: 'yipee', baz: 'xoxo'}
	
	4)$filter - Filters are used for formatting data displayed to the user.They can be used in view templates, 								controllers or services.
	Syntax in templates is as follows:
			{{ expression [| filter_name[:parameter_value] ... ] }}

	Example:
			<div ng-controller="MainCtrl">
 				 <h3>{{ originalText }}</h3>
				 <h3>{{ filteredText }}</h3>
			</div>

			angular.module('filterExample', []).controller('MainCtrl', function($scope, $filter) {
			  $scope.originalText = 'hello';
			  $scope.filteredText = $filter('uppercase')($scope.originalText);
			});

	Example:
			angular.module('filterExample', []).controller('MainCtrl', function($scope, $filter) {
			  $scope.handle = '';
			  $scope.lowercasehandle = function(){
					return $filter('lowercase')($scope.handle);
				}
			});

			<div ng-controller="MainCtrl">
				<label>What's your name?</label>
				<input type="text" ng-model="handle">

				<h2>{{ lowercasehandle() }}</h2>
			</div>

	5) $http - The $http service is a core Angular service that facilitates communication with the remote HTTP servers 			via the browser's XMLHttpRequest object or via JSONP.
		The $http service is a function which takes a single argument — a configuration object — that is used to generate 		an HTTP request and returns a promise.
			// Simple GET request example:
			$http({
				method: 'GET',
				url: '/someUrl'
			}).then(function successCallback(response) {
					// this callback will be called asynchronously
					// when the response is available
				}, function errorCallback(response) {
					// called asynchronously if an error occurs
					// or server returns response with an error status.
				});

		The response object has these properties:

		data – {string|Object} – The response body transformed with the transform functions.
		status – {number} – HTTP status code of the response.
		headers – {function([headerName])} – Header getter function.
		config – {Object} – The configuration object that was used to generate the request.
		statusText – {string} – HTTP status text of the response.
		
		A response status code between 200 and 299 is considered a success status and will result in the success callback 		being called. Any response status code outside of that range is considered an error status and will result in the 		error callback being called. Also, status codes less than -1 are normalized to zero. -1 usually means the request 		was aborted, e.g. using a config.timeout. Note that if the response is a redirect, XMLHttpRequest will
		transparently follow it, meaning that the outcome (success or error) will be determined by the final response 			  status code.

		Shortcut methods:
			$http.get('/someUrl', config).then(successCallback, errorCallback);
			$http.post('/someUrl', data, config).then(successCallback, errorCallback);

		- if we are sending to different URL than one that is client hosted, we get CROSS-ORIGIN error. This that the
			browser doens't like we comunicate with API that is on the different URL the one tah is web app been hosted on.
			To solve this we need to enable CROS(cross-origin-sharing) on Express.

	6) $parse - converts Angular expression into a function

Angular Modules as Dependencies
	var app = angular.module('app', ['ngResource','ngMessages']);

	app.controller('mainCtrl', function(){
		...
	});

$resource
	- client-side Active Record
	- A factory which creates a resource object that lets you interact with RESTful server-side data sources.
	- Syntax:
		$resource(url, [paramDefaults], [actions], options);

		url(string) - A parameterized URL template with parameters prefixed by : as in /user/:username


Controllers
	- using 'this' instead of $scope:
			// in controller
			this.title = "Title";

		- in views we use name of controller of what is defined in controllerAs in routes:
				.when('/', {
		      templateUrl: 'views/movie.html',
		      controller: 'MoviesCtrl',
		      controllerAs: 'movie'
		    })

				// in views
				<div ng-controller="MoviesCtrl as movie">
					<h2>{{ movie.title }}</h2>
				</div>
